local RS = game:GetService("ReplicatedStorage")
local UIS = game:GetService("UserInputService")

local Player = game:GetService("Players").LocalPlayer
local Camera = workspace.CurrentCamera
local GUI = Player.PlayerGui:WaitForChild("CombatGui")
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid
local Backpack = Player.Backpack

local CharacterConnections = {}

-- ReplicatedRemote
local ReplicatedRemote = RS.Remotes.Replicate

-- CameraShaker
local function ShakeCamera(ShakeCFrame)
	Camera.CFrame = Camera.CFrame * ShakeCFrame
end

local CameraShaker = require(RS.Modules.Auxillary.CameraShaker).new(Enum.RenderPriority.Camera.Value, ShakeCamera)
CameraShaker:Start()

-- Cooldown Manager
local CooldownManager = require(RS.Modules.Auxillary.CooldownManager).new(Player, GUI)

-- Status Manager
local StatusFolder = Character:WaitForChild("StatusFolder")
local StatusManager = require(RS.Modules.Auxillary.StatusManager).new(Player)

local AuxObjects = {
	["CameraShaker"] = CameraShaker,
	["CooldownManager"] = CooldownManager,
	["StatusManager"] = StatusManager,
}

-- Default current weapon to fist
local BaseCombat = require(RS.Modules.Items.FistCombat).new(Player, AuxObjects)
local CurrentItem = BaseCombat
CurrentItem:Equip()

function HandleInputs(UserInput, GPE)
	if GPE then return end
	-- Convert UserInput into a String for ease of use
	local InputName = tostring(UserInput.KeyCode)
	if InputName == "Unknown" then
		InputName = UserInput.UserInputType.Name
	end
	if UserInput.UserInputType == Enum.UserInputType.MouseButton1 then
		InputName = "M1"
	elseif UserInput.UserInputType == Enum.UserInputType.MouseButton2 then
		InputName = "M2"
	end
	-- Handle the input here (currently no specific action for M1/M2)
end

UIS.InputBegan:Connect(HandleInputs)
UIS.InputEnded:Connect(HandleInputs)

-- Super Simple Replicator
local Modules = {}
for i, Item in pairs(RS.Modules.Items:GetChildren()) do
	Modules[Item.Name] = require(Item)
end

ReplicatedRemote.OnClientEvent:Connect(function(Args)
	Modules[Args.Module][Args.Action](Args)
end)

----------------------------------------------------------------
-- Inventory System

-- Connections
local BackpackConnections = {}
local BackpackCoreConnections = {}

function AddItem(Tool)
	if Tool:IsA("Tool") and not BackpackConnections[Tool] then
		BackpackConnections[Tool] = {}
		BackpackConnections[Tool].Module = require(RS.Modules.Items[Tool.Name]).new(Player, AuxObjects)
		BackpackConnections[Tool].Equipped = Tool.Equipped:Connect(function()
			CurrentItem:Unequip()
			CurrentItem = BackpackConnections[Tool].Module
			CurrentItem:Equip()
		end)
		
		BackpackConnections[Tool].Unequipped = Tool.Unequipped:Connect(function()
			if Character:FindFirstChildWhichIsA("Tool") == nil then
				CurrentItem:Unequip()
				CurrentItem = BaseCombat
				CurrentItem:Equip()
			end
		end)
	end
end

for i, OtherPlayer in pairs(game:GetService("Players"):GetPlayers()) do
	if OtherPlayer ~= Player then
		if OtherPlayer.Character:FindFirstChildWhichIsA("Tool") then
			Modules[OtherPlayer.Character:FindFirstChildWhichIsA("Tool").Name].CreateModel({Character = OtherPlayer.Character})
		end
	end
end

function LoadCharacter(Char)
	Character = Char
	Humanoid = Char:WaitForChild("Humanoid")
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
	
	Backpack = Player.Backpack
	BackpackConnections.ChildAdded = Backpack.ChildAdded:Connect(function(Tool)
		if Tool:IsA("Tool") then
			AddItem(Tool)
		end
	end)
	
	BackpackConnections.ChildRemoved = Backpack.ChildRemoved:Connect(function(Tool)
		if Tool:IsA("Tool") then
		    if Tool.Parent ~= Character then
				BackpackConnections[Tool].Equipped:Disconnect()
				BackpackConnections[Tool].Unequipped:Disconnect()
				BackpackConnections[Tool].Module:Destroy()
				BackpackConnections[Tool] = nil
			end
		end
	end)
	
	for i, Tool in pairs(Backpack:GetChildren()) do
		AddItem(Tool)
	end
		
	CurrentItem = BaseCombat
	CurrentItem:Equip()
		
	CharacterConnections["Died"] = Humanoid.Died:Connect(function()
		BackpackCoreConnections.ChildAdded:Disconnect()
		BackpackCoreConnections.ChildRemoved:Disconnect()
		-- Make sure our character isn't attacking when dead
		CurrentItem:Lock()
	end)
		
	CurrentItem:UpdateCharacter()
	CurrentItem:Unlock()
end

Player.CharacterAdded:Connect(LoadCharacter)
LoadCharacter(Character)