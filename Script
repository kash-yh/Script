local CooldownManager = {}
CooldownManager.__index = CooldownManager

local RF = game:GetService("ReplicatedFirst")
local TS = game:GetService("TweenService")
local RS = game:GetService("RunService")

local Assets = RF.Assets.UI.Cooldown

function CooldownManager.new(User, GUI)
    local self = setmetatable({}, CooldownManager)
    self.GUI = GUI
    self.CooldownList = {}
    self.CurrentItem = nil
    self.InAction = false

    return self
end

function CooldownManager:AddCooldown(ItemName, Action, Length)
    local Cooldown = self.CooldownList[ItemName][Action]
    Cooldown.OnCooldown = true
    Cooldown.StartTime = time()
    Cooldown.Length = Length
    
    self.GUI.Main.Cooldowns[Action].BackgroundColor3 = Color3.fromRGB(144, 80, 80)
    TS:Create(self.GUI.Main.Cooldowns[Action], TweenInfo.new(Length, Enum.EasingStyle.Linear), {BackgroundColor3 = Color3.fromRGB(144, 144, 144)}):Play()
    Cooldown.Times = Cooldown.Times + 1
    local CurrentTimes = Cooldown.Times
    task.spawn(function()
        local StartTime = Cooldown.StartTime
        Cooldown.Con = RS.RenderStepped:Connect(function()
            if time() - StartTime >= Length then
                self.GUI.Main.Cooldowns[Action].Time.Text = "0".."s"
                self.GUI.Main.Cooldowns[Action].Time.Text = ""
                Cooldown.Con:Disconnect()
                if Cooldown.Times == CurrentTimes then
                    Cooldown.OnCooldown = false
                end
            else
                self.GUI.Main.Cooldowns[Action].Time.Text = ""..(math.round((Length - (time() - StartTime)) * 10) / 10).."s"
            end
        end)
    end)
end

function CooldownManager:AddItem(ItemName, Actions)
    self.CooldownList[ItemName] = {}
    for i, v in pairs(Actions) do
        self.CooldownList[ItemName][v.Name] = {Times = 0, OnCooldown = false, Key = i}
    end
end

function CooldownManager:OnCooldown(ItemName, Action)
    return self.CooldownList[ItemName][Action].OnCooldown
end

function CooldownManager:LoadItem(ItemName)
    if self.CurrentItem ~= nil then
        for i, Cooldown in pairs(self.CooldownList[self.CurrentItem]) do
            if Cooldown.Con then
                Cooldown.Con:Disconnect()
            end
        end
    end
    
    -- Clean up old UI elements
    for i, v in pairs(self.GUI.Main.Cooldowns:GetChildren()) do
        if v:IsA("GuiBase") then
            v:Destroy()
        end
    end
    
    -- Load new item cooldown UI
    self:UpdateCooldowns(ItemName)
end

function CooldownManager:UpdateCooldowns(ItemName)
    -- Make sure ItemName is passed into this function

    -- Loop through all cooldowns for the current ItemName
    for i, Cooldown in pairs(self.CooldownList[ItemName]) do
        local UI = Assets.CooldownHolder:Clone()
        UI.LayoutOrder = Cooldown.LayoutOrder
        UI.Key.Text = Cooldown.Key
        UI.Time.Text = ""
        UI.ActionName.Text = i
        UI.Name = i
        UI.Parent = self.GUI.Main.Cooldowns
        UI.BackgroundColor3 = Color3.fromRGB(144, 144, 144)

        -- Check if StartTime exists and calculate cooldown
        if Cooldown.StartTime then
            if time() - Cooldown.StartTime < Cooldown.Length then
                self:AddCooldown(ItemName, i, Cooldown.Length - (time() - Cooldown.StartTime))
            else
                Cooldown.OnCooldown = false
            end
        end
    end

    -- Set the current item after the loop
    self.CurrentItem = ItemName
end

return CooldownManager