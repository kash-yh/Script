-- Client Script

local RS = game:GetService("ReplicatedStorage")
local UIS = game:GetService("UserInputService")
local Player = game:GetService("Players").LocalPlayer
local Camera = workspace.CurrentCamera
local GUI = Player.PlayerGui:WaitForChild("CombatGui")
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid
local Backpack = Player.Backpack

-- Replicated Remote
local ReplicatedRemote = RS.Remotes.Replicate

-- Camera Shaker
local function ShakeCamera(ShakeCFrame)
    Camera.CFrame = Camera.CFrame * ShakeCFrame
end
local CameraShaker = require(RS.Modules.Auxillary.CameraShaker).new(Enum.RenderPriority.Camera.Value, ShakeCamera)
CameraShaker:Start()

-- Cooldown Manager
local CooldownManager = require(RS.Modules.Auxillary.CooldownManager).new(Player, GUI)

-- Status Manager
local StatusFolder = Character:WaitForChild("StatusFolder")
local StatusManager = require(RS.Modules.Auxillary.StatusManager).new(Player)

-- Auxiliary Objects for management
local AuxObjects = {
    ["CameraShaker"] = CameraShaker,
    ["CooldownManager"] = CooldownManager,
    ["StatusManager"] = StatusManager,
}

-- Default current weapon to Fist
local BaseCombat = require(RS.Modules.Items.FistCombat).new(Player, AuxObjects)
local CurrentItem = BaseCombat
CurrentItem:Equip()

-- Handle User Input (Mouse/Keyboard)
function HandleInputs(UserInput, GPE)
    if GPE then return end
    -- Convert UserInput into a string for ease of use
    local InputName = tostring(UserInput.KeyCode)
    if InputName == "Unknown" then
        InputName = UserInput.UserInputType.Name
    end
    if UserInput.UserInputType == Enum.UserInputType.MouseButton1 then
        InputName = "M1" -- Left Mouse Button
    elseif UserInput.UserInputType == Enum.UserInputType.MouseButton2 then
        InputName = "M2" -- Right Mouse Button
    end

    -- Example actions for M1 (Attack) and M2 (Block)
    if InputName == "M1" then
        CurrentItem:Attack()  -- Attack action (add custom method in your BaseCombat module)
    elseif InputName == "M2" then
        CurrentItem:Block()  -- Block action (add custom method in your BaseCombat module)
    end
end

UIS.InputBegan:Connect(HandleInputs)
UIS.InputEnded:Connect(HandleInputs)

-- Handle Receiving Events from Server
local Modules = {}
for i, Item in pairs(RS.Modules.Items:GetChildren()) do
    Modules[Item.Name] = require(Item)
end

ReplicatedRemote.OnClientEvent:Connect(function(Args)
    Modules[Args.Module][Args.Action](Args)  -- Execute the action defined in the server
end)

----------------------------------------------------------------
-- Inventory System and Tool Management

local BackpackConnections = {}

function AddItem(Tool)
    if Tool:IsA("Tool") and not BackpackConnections[Tool] then
        BackpackConnections[Tool] = {}
        BackpackConnections[Tool].Module = require(RS.Modules.Items[Tool.Name]).new(Player, AuxObjects)
        BackpackConnections[Tool].Equipped = Tool.Equipped:Connect(function()
            CurrentItem:Unequip()
            CurrentItem = BackpackConnections[Tool].Module
            CurrentItem:Equip()
        end)

        BackpackConnections[Tool].Unequipped = Tool.Unequipped:Connect(function()
            if not Character:FindFirstChildWhichIsA("Tool") then
                CurrentItem:Unequip()
                CurrentItem = BaseCombat
                CurrentItem:Equip()
            end
        end)
    end
end

for _, OtherPlayer in pairs(game:GetService("Players"):GetPlayers()) do
    if OtherPlayer ~= Player and OtherPlayer.Character then
        local tool = OtherPlayer.Character:FindFirstChildWhichIsA("Tool")
        if tool then
            Modules[tool.Name].CreateModel({Character = OtherPlayer.Character})
        end
    end
end

function LoadCharacter(Char)
    Character = Char
    Humanoid = Char:WaitForChild("Humanoid")
    Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
    Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)

    Backpack = Player.Backpack
    -- Add Tool when added to Backpack
    BackpackConnections.ChildAdded = Backpack.ChildAdded:Connect(function(Tool)
        if Tool:IsA("Tool") then
            AddItem(Tool)
        end
    end)

    -- Remove Tool when removed from Backpack
    BackpackConnections.ChildRemoved = Backpack.ChildRemoved:Connect(function(Tool)
        if Tool:IsA("Tool") then
            if Tool.Parent ~= Character then
                BackpackConnections[Tool].Equipped:Disconnect()
                BackpackConnections[Tool].Unequipped:Disconnect()
                BackpackConnections[Tool].Module:Destroy()
                BackpackConnections[Tool] = nil
            end
        end
    end)

    -- Add existing tools in the Backpack
    for _, Tool in pairs(Backpack:GetChildren()) do
        AddItem(Tool)
    end

    CurrentItem = BaseCombat
    CurrentItem:Equip()

    CharacterConnections["Died"] = Humanoid.Died:Connect(function()
        -- Clean up when character dies
        for _, conn in pairs(BackpackConnections) do
            conn.Equipped:Disconnect()
            conn.Unequipped:Disconnect()
        end
        BackpackConnections = {}
        CurrentItem:Lock()
    end)

    CurrentItem:UpdateCharacter()
    CurrentItem:Unlock()
end

Player.CharacterAdded:Connect(LoadCharacter)
LoadCharacter(Character)